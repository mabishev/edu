package main

import (
	"bufio"
	"fmt"
	"os"
	"strconv"
)

func main() {
	scanner := bufio.NewScanner(os.Stdin)
	scanner.Scan()
	n, _ := strconv.Atoi(scanner.Text())
	fmt.Println(factorialRecursive(n))
	fmt.Println(factorialLoop(n))
}

func factorialRecursive(n int) int {
	if n <= 0 {
		return 1
	}
	return n * factorialRecursive(n-1)
}

func factorialLoop(n int) int {
	if n < 0 {
		return -1
	}
	result := 1
	for i := 1; i <= n; i++ {
		result *= i
	}
	return result
}

// 1) factorialRecursive (рекурсивный подход):
//Преимущества: Преимуществом рекурсивного метода является его простота и читаемость. Этот код легче понимать, так как он напрямую отражает математическое определение факториала (n! = n * (n-1)!).
//Недостатки: Недостатком рекурсивного метода является то, что он может потреблять больше памяти и вызывать переполнение стека при больших значениях n. Рекурсия может быть неэффективной из-за большого количества вызовов функции.

//2) factorialLoop (циклический подход):
//Преимущества: Циклический метод более эффективен с точки зрения использования памяти и времени выполнения, особенно при больших значениях n. Он не вызывает переполнение стека и требует линейное количество итераций, пропорциональное значению n.
//Недостатки: Менее читаем, чем рекурсивный метод, и требует больше кода для реализации.
