package main

import "fmt"

func main() {
	fmt.Println(hashFunc(123456789))
}

func hashFunc(val int64) uint64 {
	hash := uint64(val % 1000)
	return hash
}

func hashstr(val string) uint64 {
	hash := uint64(0)
	for _, r := range val {
		hash = hash*31 + uint64(r)
	}
	return hash
}

//Умножение на 31 в данной реализации хеш-функции является общепринятой практикой и было выбрано из-за
//своих хороших характеристик при генерации хешей для строк.
//
//Множитель 31 был выбран потому, что он является простым числом и нечетным числом. Простые числа
//хорошо подходят для хеш-функций, поскольку они имеют меньшую вероятность образования коллизий
//(ситуации, когда двум разным входным значениям соответствует один и тот же хеш). Нечетное число 31
//также имеет дополнительное преимущество при вычислении хеша строк, так как оно отличается от степеней
//двойки (как, например, 2, 4, 8, и т.д.), что помогает избежать возможных зависимостей от определенных
//свойств строки.
//
//Умножение на 31 также обладает хорошими свойствами распределения значений хешей по битам и помогает
//снизить вероятность коллизий для различных строк. В результате, использование умножения на 31
//обеспечивает хорошую производительность и достаточную уникальность хешей для большинства случаев
//использования.
//
//Несмотря на это, важно отметить, что выбор оптимального множителя для хеш-функции может зависеть от
//конкретной ситуации и типа данных, с которыми вы работаете. В некоторых случаях другие числа или методы
//могут быть более подходящими.
